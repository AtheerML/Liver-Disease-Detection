# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126TevCcg3-31t095JkOLGpA8RzmTj18m
"""

import pandas as pd

X = pd.read_csv('X.csv')
Y = pd.read_csv('Y.csv')
X_test = pd.read_csv('X_test.csv')
Y_test = pd.read_csv('Y_test.csv')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# إنشاء نموذج ANN بسيط
model = Sequential()
model.add(Dense(32, input_dim=X.shape[1], activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # تصنيف ثنائي

# تجميع النموذج
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# تدريب النموذج
history = model.fit(X, Y, epochs=50, batch_size=16, validation_split=0.2, verbose=1)

# التنبؤ على بيانات الاختبار
y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype("int32")

# تقييم النموذج
acc = accuracy_score(Y_test, y_pred_classes)
print(f"Accuracy: {acc*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_classes))

# مصفوفة الالتباس
cm = confusion_matrix(Y_test, y_pred_classes)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix - ANN")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# تدريب نموذج SVM
svm_model = SVC(kernel='rbf')  # يمكنك تغيير kernel حسب الحاجة
svm_model.fit(X, Y)

# التنبؤ على بيانات الاختبار
y_pred_svm = svm_model.predict(X_test)

# تقييم الأداء
acc_svm = accuracy_score(Y_test, y_pred_svm)
print(f"SVM Accuracy: {acc_svm*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_svm))

# مصفوفة الالتباس
cm_svm = confusion_matrix(Y_test, y_pred_svm)
sns.heatmap(cm_svm, annot=True, fmt="d", cmap="Greens")
plt.title("Confusion Matrix - SVM")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# تدريب نموذج Naive Bayes
nb_model = GaussianNB()
nb_model.fit(X, Y)

# التنبؤ على بيانات الاختبار
y_pred_nb = nb_model.predict(X_test)

# تقييم الأداء
acc_nb = accuracy_score(Y_test, y_pred_nb)
print(f"Naive Bayes Accuracy: {acc_nb*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_nb))

# مصفوفة الالتباس
cm_nb = confusion_matrix(Y_test, y_pred_nb)
sns.heatmap(cm_nb, annot=True, fmt="d", cmap="Oranges")
plt.title("Confusion Matrix - Naive Bayes")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# تدريب نموذج KNN
knn_model = KNeighborsClassifier(n_neighbors=5)  # يمكنك تعديل عدد الجيران
knn_model.fit(X, Y)

# التنبؤ على بيانات الاختبار
y_pred_knn = knn_model.predict(X_test)

# تقييم الأداء
acc_knn = accuracy_score(Y_test, y_pred_knn)
print(f"KNN Accuracy: {acc_knn*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_knn))

# مصفوفة الالتباس
cm_knn = confusion_matrix(Y_test, y_pred_knn)
sns.heatmap(cm_knn, annot=True, fmt="d", cmap="Purples")
plt.title("Confusion Matrix - KNN")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# تدريب نموذج Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X, Y)

# التنبؤ على بيانات الاختبار
y_pred_rf = rf_model.predict(X_test)

# تقييم الأداء
acc_rf = accuracy_score(Y_test, y_pred_rf)
print(f"Random Forest Accuracy: {acc_rf*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_rf))

# مصفوفة الالتباس
cm_rf = confusion_matrix(Y_test, y_pred_rf)
sns.heatmap(cm_rf, annot=True, fmt="d", cmap="YlGnBu")
plt.title("Confusion Matrix - Random Forest")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# تدريب نموذج Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X, Y)

# التنبؤ على بيانات الاختبار
y_pred_dt = dt_model.predict(X_test)

# تقييم الأداء
acc_dt = accuracy_score(Y_test, y_pred_dt)
print(f"Decision Tree Accuracy: {acc_dt*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_dt))

# مصفوفة الالتباس
cm_dt = confusion_matrix(Y_test, y_pred_dt)
sns.heatmap(cm_dt, annot=True, fmt="d", cmap="RdPu")
plt.title("Confusion Matrix - Decision Tree")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# تدريب نموذج Linear Regression
lr_model = LinearRegression()
lr_model.fit(X, Y)

# التنبؤ وتحويل النتائج إلى 0 أو 1
y_pred_lr_raw = lr_model.predict(X_test)
y_pred_lr = np.where(y_pred_lr_raw >= 0.5, 1, 0)

# تقييم الأداء
acc_lr = accuracy_score(Y_test, y_pred_lr)
print(f"Linear Regression Accuracy: {acc_lr*100:.2f}%")
print("\nClassification Report:\n", classification_report(Y_test, y_pred_lr))

# مصفوفة الالتباس
cm_lr = confusion_matrix(Y_test, y_pred_lr)
sns.heatmap(cm_lr, annot=True, fmt="d", cmap="coolwarm")
plt.title("Confusion Matrix - Linear Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# نتائج الدقة لكل نموذج - يمكنك تعديل القيم لاحقاً
accuracy_data = {
    'Model': [
        'ANN', 'SVM', 'Naive Bayes', 'KNN',
        'Random Forest', 'Decision Tree', 'Linear Regression'
    ],
    'Accuracy': [
        0.85, 0.82, 0.78, 0.80,
        0.88, 0.84, 0.76
    ]
}

# إنشاء DataFrame
accuracy_df = pd.DataFrame(accuracy_data)

# عرض جدول الدقة
print("Model Accuracy Scores:")
print(accuracy_df)

# رسم شريطي لمقارنة الدقة
plt.figure(figsize=(10, 6))
plt.bar(accuracy_df['Model'], accuracy_df['Accuracy'], color='skyblue')
plt.ylim(0.6, 1.0)
plt.title('Model Accuracy Comparison')
plt.ylabel('Accuracy')
plt.xlabel('Model')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()